//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IM.Data.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class db_InventoryEntities : DbContext
    {
        public db_InventoryEntities()
            : base("name=db_InventoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<logs_User> logs_User { get; set; }
        public virtual DbSet<outlet> outlets { get; set; }
        public virtual DbSet<OutletMapping> OutletMappings { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<item> items { get; set; }
        public virtual DbSet<unit> units { get; set; }
        public virtual DbSet<logsOutletStock> logsOutletStocks { get; set; }
        public virtual DbSet<logsPRStatu> logsPRStatus { get; set; }
        public virtual DbSet<movementType> movementTypes { get; set; }
        public virtual DbSet<outletStock> outletStocks { get; set; }
        public virtual DbSet<prItemLog> prItemLogs { get; set; }
        public virtual DbSet<prItem> prItems { get; set; }
        public virtual DbSet<prRequest> prRequests { get; set; }
        public virtual DbSet<logsDailyStock> logsDailyStocks { get; set; }
        public virtual DbSet<logsDailyJob> logsDailyJobs { get; set; }
        public virtual DbSet<logsInventoryAlert> logsInventoryAlerts { get; set; }
    
        public virtual ObjectResult<Nullable<int>> IMPORT_ITEM_FROM_PR(Nullable<int> fROMOUTLETID, Nullable<int> tOOUTLETID, Nullable<int> pRID, string uSERNAME, string prItem)
        {
            var fROMOUTLETIDParameter = fROMOUTLETID.HasValue ?
                new ObjectParameter("FROMOUTLETID", fROMOUTLETID) :
                new ObjectParameter("FROMOUTLETID", typeof(int));
    
            var tOOUTLETIDParameter = tOOUTLETID.HasValue ?
                new ObjectParameter("TOOUTLETID", tOOUTLETID) :
                new ObjectParameter("TOOUTLETID", typeof(int));
    
            var pRIDParameter = pRID.HasValue ?
                new ObjectParameter("PRID", pRID) :
                new ObjectParameter("PRID", typeof(int));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var prItemParameter = prItem != null ?
                new ObjectParameter("prItem", prItem) :
                new ObjectParameter("prItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IMPORT_ITEM_FROM_PR", fROMOUTLETIDParameter, tOOUTLETIDParameter, pRIDParameter, uSERNAMEParameter, prItemParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IMPORT_NEW_ITEM_TOSTORE(Nullable<int> oUTLETID)
        {
            var oUTLETIDParameter = oUTLETID.HasValue ?
                new ObjectParameter("OUTLETID", oUTLETID) :
                new ObjectParameter("OUTLETID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IMPORT_NEW_ITEM_TOSTORE", oUTLETIDParameter);
        }
    
        public virtual int CAPTUREDAILYLOGS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CAPTUREDAILYLOGS");
        }
    
        public virtual int UPDATEMATERIALRATEFORPO(Nullable<int> outletId, Nullable<int> prId)
        {
            var outletIdParameter = outletId.HasValue ?
                new ObjectParameter("outletId", outletId) :
                new ObjectParameter("outletId", typeof(int));
    
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("prId", prId) :
                new ObjectParameter("prId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATEMATERIALRATEFORPO", outletIdParameter, prIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EXPORT_ITEM_PO_REQUEST(Nullable<int> tOOUTLETID, Nullable<int> pRID, string uSERNAME)
        {
            var tOOUTLETIDParameter = tOOUTLETID.HasValue ?
                new ObjectParameter("TOOUTLETID", tOOUTLETID) :
                new ObjectParameter("TOOUTLETID", typeof(int));
    
            var pRIDParameter = pRID.HasValue ?
                new ObjectParameter("PRID", pRID) :
                new ObjectParameter("PRID", typeof(int));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EXPORT_ITEM_PO_REQUEST", tOOUTLETIDParameter, pRIDParameter, uSERNAMEParameter);
        }
    
        [DbFunction("db_InventoryEntities", "GET_ITEMWISE_SNAPSHOT")]
        public virtual IQueryable<GET_ITEMWISE_SNAPSHOT_Result> GET_ITEMWISE_SNAPSHOT(Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<int> oUTLETID)
        {
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var oUTLETIDParameter = oUTLETID.HasValue ?
                new ObjectParameter("OUTLETID", oUTLETID) :
                new ObjectParameter("OUTLETID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GET_ITEMWISE_SNAPSHOT_Result>("[db_InventoryEntities].[GET_ITEMWISE_SNAPSHOT](@FROMDATE, @TODATE, @OUTLETID)", fROMDATEParameter, tODATEParameter, oUTLETIDParameter);
        }
    }
}
